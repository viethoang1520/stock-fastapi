from db_utils.pg_pool import get_pool
from datetime import datetime, time
import aiohttp
import aiofiles
import os
from pathlib import Path
from typing import List, Optional

async def save_support_output_to_db(support_output):
    """
    L∆∞u th√¥ng tin SupportOutput v√†o b·∫£ng stock_analysis, k√®m phi√™n giao d·ªãch.
    support_output: object c√≥ c√°c thu·ªôc t√≠nh analysis_advice, symbol, sentiment, topic
    session: 'morning', 'afternoon', ho·∫∑c 'out_of_session'
    """
    pool = get_pool()
    async with pool.acquire() as conn:
        # L·∫•y stock_id t·ª´ b·∫£ng stock
        stock_id = await conn.fetchrow("SELECT stock_id FROM stock WHERE symbol = $1", support_output.symbol)
        if not stock_id:
            raise ValueError(f"Stock with symbol {support_output.symbol} not found")
        
        stock_id = stock_id["stock_id"]
        
        # L·∫•y session t·ª´ h√†m get_trading_session
        session = get_trading_session()

        # L∆∞u th√¥ng tin v√†o b·∫£ng post
        await conn.execute(
            """
            INSERT INTO post (title, content, stock_id, sentiment, topic, session, level)
            VALUES ($1, $2, $3, $4, $5, $6, $7)
            """,
            support_output.title,
            support_output.analysis_advice,
            stock_id,
            support_output.sentiment,
            support_output.topic,
            session,
            "SYMBOL"
        )

def get_trading_session(dt=None):
    if dt is None:
        dt = datetime.now()
    t = dt.time()
    if t < time(15, 0):
      return 1
    elif time(15, 0) <= t < time(17, 0):
      return 2
    else:
      return 3

async def save_market_analysis_to_db(market_analysis):
    """
    L∆∞u th√¥ng tin MarketAnalysis v√†o b·∫£ng post
    market_analysis: object c√≥ c√°c thu·ªôc t√≠nh title, analysis, sentiment
    """
    pool = get_pool()
    async with pool.acquire() as conn:
        await conn.execute(
            """
            INSERT INTO post (title, content, sentiment, topic, level)
            VALUES ($1, $2, $3, $4, $5)
            """,
            market_analysis.title,
            market_analysis.analysis,
            market_analysis.sentiment,
            "MARKET", 
            "MARKET",
        )

# ============ PODCAST UPLOAD FUNCTIONS ============

async def upload_single_podcast_file(
    server_url: str,
    file_path: str,
    title: str,
    secret_key: str,
    endpoint: str = "/podcasts/upload",
    description: str = None,
    uploaded_by: str = None,
    status: str = "published",
    tags: List[str] = None,
    headers: Optional[dict] = None
) -> dict:
    """
    Upload m·ªôt file podcast ƒë∆°n l·∫ª l√™n server
    
    Args:
        server_url: URL c·ªßa server
        file_path: ƒê∆∞·ªùng d·∫´n t·ªõi file audio
        title: Ti√™u ƒë·ªÅ podcast (b·∫Øt bu·ªôc)
        secret_key: Secret key ƒë·ªÉ authentication (b·∫Øt bu·ªôc)
        endpoint: API endpoint ƒë·ªÉ upload (m·∫∑c ƒë·ªãnh: "/podcasts/upload")
        description: M√¥ t·∫£ podcast (t√πy ch·ªçn)
        uploaded_by: ID ng∆∞·ªùi upload (t√πy ch·ªçn)
        status: Tr·∫°ng th√°i podcast (m·∫∑c ƒë·ªãnh: "published")
        tags: Tags cho podcast (t√πy ch·ªçn)
        headers: Headers t√πy ch·ªçn
    
    Returns:
        dict: Response t·ª´ server
    """
    file_path = Path(file_path)
    
    if not file_path.exists():
        raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y file audio '{file_path}'")
    
    url = f"{server_url.rstrip('/')}{endpoint}"
    
    async with aiohttp.ClientSession() as session:
        data = aiohttp.FormData()
        
        # Th√™m file audio (b·∫Øt bu·ªôc)
        async with aiofiles.open(file_path, 'rb') as f:
            file_content = await f.read()
            data.add_field(
                'audio',
                file_content,
                filename=file_path.name,
                content_type='audio/mpeg' if file_path.suffix.lower() == '.mp3' else 'audio/wav'
            )
        
        # Th√™m c√°c field b·∫Øt bu·ªôc
        data.add_field('title', title)
        data.add_field('secretKey', secret_key)
        
        # Th√™m c√°c field t√πy ch·ªçn
        if description:
            data.add_field('description', description)
        if uploaded_by:
            data.add_field('uploadedBy', uploaded_by)
        if status:
            data.add_field('status', status)
        if tags:
            for tag in tags:
                data.add_field('tags', tag)
        
        try:
            print(f"üöÄ ƒêang upload file: {file_path.name}")
            
            async with session.post(url, data=data, headers=headers) as response:
                response_text = await response.text()
                
                try:
                    response_data = await response.json()
                except:
                    response_data = {"message": response_text}
                
                if response.status == 200 or response.status == 201:
                    print(f"‚úÖ Upload th√†nh c√¥ng {file_path.name}")
                    return {
                        'success': True,
                        'status_code': response.status,
                        'uploaded_file': file_path.name,
                        'title': title,
                        'server_response': response_data
                    }
                else:
                    print(f"‚ùå Upload th·∫•t b·∫°i cho {file_path.name} - Status: {response.status}")
                    return {
                        'success': False,
                        'status_code': response.status,
                        'error': response_data,
                        'failed_file': file_path.name
                    }
                    
        except Exception as e:
            print(f"‚ùå L·ªói khi upload {file_path.name}: {str(e)}")
            return {
                'success': False,
                'error': str(e),
                'failed_file': file_path.name
            }

async def upload_audio_directory(
    directory_path: str, 
    secret_key: str, 
    server_url: str = "https://swd-stockintel.onrender.com"
) -> dict:
    """
    H√ÄM CH√çNH: Upload file audio trong th∆∞ m·ª•c (m·ªói th∆∞ m·ª•c c√≥ 1 file)
    
    Args:
        directory_path: ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c ch·ª©a file audio
        secret_key: Secret key ƒë·ªÉ authentication
        server_url: URL server
    
    Returns:
        dict: K·∫øt qu·∫£ upload v·ªõi th√¥ng tin chi ti·∫øt
    """
    directory = Path(directory_path)
    
    if not directory.exists():
        raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c '{directory_path}'")
    
    if not directory.is_dir():
        raise ValueError(f"'{directory_path}' kh√¥ng ph·∫£i l√† th∆∞ m·ª•c")
    
    # C√°c ƒë·ªãnh d·∫°ng audio ƒë∆∞·ª£c h·ªó tr·ª£
    audio_extensions = {'.mp3', '.wav', '.m4a', '.aac', '.ogg', '.flac'}
    audio_files = [
        f for f in directory.iterdir() 
        if f.is_file() and f.suffix.lower() in audio_extensions
    ]
    
    if not audio_files:
        return {
            'success': False,
            'error': f"Kh√¥ng t√¨m th·∫•y file audio n√†o trong th∆∞ m·ª•c '{directory_path}'",
            'directory_path': directory_path,
            'uploaded_file': None
        }
    
    # L·∫•y file ƒë·∫ßu ti√™n (v√¨ m·ªói th∆∞ m·ª•c ch·ªâ c√≥ 1 file)
    audio_file = audio_files[0]
    
    if len(audio_files) > 1:
        print(f"‚ö†Ô∏è C·∫£nh b√°o: T√¨m th·∫•y {len(audio_files)} file, ch·ªâ upload file ƒë·∫ßu ti√™n: {audio_file.name}")
    
    print(f"üìÅ ƒêang upload file: {audio_file.name} t·ª´ th∆∞ m·ª•c: {directory_path}")
    
    try:
        # T·∫°o title t·ª´ t√™n file
        file_name_without_ext = audio_file.stem
        title = f"Podcast: {file_name_without_ext}"
        
        # T·ª± ƒë·ªông ph√°t hi·ªán tags t·ª´ t√™n file v√† th∆∞ m·ª•c
        tags = []
        
        # Th√™m symbol n·∫øu c√≥ trong t√™n file
        if '_' in file_name_without_ext:
            potential_symbol = file_name_without_ext.split('_')[0].upper()
            if len(potential_symbol) >= 2 and len(potential_symbol) <= 5:
                tags.append(potential_symbol)
        
        # Th√™m session hi·ªán t·∫°i v√† ng√†y
        tags.append(f"session_{get_trading_session()}")
        tags.append(datetime.now().strftime('%Y%m%d'))
        
        # Ph√°t hi·ªán lo·∫°i ph√¢n t√≠ch t·ª´ t√™n file
        file_name_lower = file_name_without_ext.lower()
        if 'market' in file_name_lower:
            tags.extend(['MARKET', 'ANALYSIS'])
            description = f"Ph√¢n t√≠ch th·ªã tr∆∞·ªùng - {datetime.now().strftime('%d/%m/%Y %H:%M')}"
        elif 'analysis' in file_name_lower:
            tags.extend(['STOCK', 'ANALYSIS'])
            description = f"Ph√¢n t√≠ch c·ªï phi·∫øu - {datetime.now().strftime('%d/%m/%Y %H:%M')}"
        else:
            tags.append('GENERAL')
            description = f"Podcast ƒë∆∞·ª£c t·∫°o t·ª´ Stock AI Tool - {datetime.now().strftime('%d/%m/%Y %H:%M')}"
        
        # Upload file
        result = await upload_single_podcast_file(
            server_url=server_url,
            file_path=str(audio_file),
            title=title,
            secret_key=secret_key,
            description=description,
            uploaded_by="stock-ai-tool",
            status="published",
            tags=tags
        )
        
        if result['success']:
            print(f"‚úÖ Upload th√†nh c√¥ng: {audio_file.name}")
            return {
                'success': True,
                'directory_path': directory_path,
                'uploaded_file': {
                    'filename': audio_file.name,
                    'filepath': str(audio_file),
                    'title': title,
                    'tags': tags,
                    'server_response': result['server_response']
                },
                'status_code': result['status_code']
            }
        else:
            print(f"‚ùå Upload th·∫•t b·∫°i: {audio_file.name}")
            return {
                'success': False,
                'directory_path': directory_path,
                'uploaded_file': None,
                'error': result.get('error', 'Unknown error'),
                'status_code': result.get('status_code', 0)
            }
        
    except Exception as e:
        error_msg = f"L·ªói khi upload {audio_file.name}: {str(e)}"
        print(f"‚ùå {error_msg}")
        return {
            'success': False,
            'directory_path': directory_path,
            'uploaded_file': None,
            'error': error_msg
        }

# ============ TEST FUNCTION ============
if __name__ == "__main__":
    import asyncio
    
    async def test_upload():
        """
        Test upload th∆∞ m·ª•c podcast
        """
        try:
            # T·∫°o file test n·∫øu kh√¥ng c√≥
            print("üîÑ T·∫°o file test...")
            os.makedirs("output/audios/test", exist_ok=True)
            test_file = "output/audios/test/test_podcast.mp3"
            
            if not os.path.exists(test_file):
                from gtts import gTTS
                test_text = "ƒê√¢y l√† file test podcast ƒë·ªÉ ki·ªÉm tra upload function"
                tts = gTTS(test_text, lang='vi')
                tts.save(test_file)
                print(f"üìÅ ƒê√£ t·∫°o file test: {test_file}")
            
            # Test upload th∆∞ m·ª•c
            result = await upload_audio_directory(
                directory_path="output/audios/test",
                secret_key="your-secret-key-here"  # Thay b·∫±ng secret key th·∫≠t
            )
            print("‚úÖ K·∫øt qu·∫£ test upload th∆∞ m·ª•c:", result)
            
        except Exception as e:
            print(f"‚ùå L·ªói trong qu√° tr√¨nh test: {e}")
    
    # Ch·∫°y test
    print("üöÄ Test upload th∆∞ m·ª•c podcast...")
    asyncio.run(test_upload())
